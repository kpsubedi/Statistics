Fuzzing nginx Hunting vulnerabilities with afl fuzz Toggle navigation Home Categories Tags Home Categories Tags Top of Page Lolware s blog Fuzzing nginx Hunting vulnerabilities with afl fuzz April th No day here If you were looking for it sorry As of hours of fuzzing I ve got crashes AFL successful fuzzing American Fuzzy Lop has a very impressive history of finding vulnerabilities The trophy case is gigantic An ELI of the design of the product is Give it a program a valid input file and it will mess with that input file until using it crashes the example program My first attempt at using it almost immediately found a crash situation in lci Lolcode interpreter Unfortunately successful use against something which is not a command line application that runs and quits is more difficult Compile and build Our first step here will be to compile afl I m going to assume you can already do this When building nginx I used the following commands export CC path afl clang configure prefix path nginxinstall with select module The use of the prefix is simple we don t want to install this as root as a proper service or run it as such The select module I ll get back to With nginx built and installed there are some very helpful config options master process off daemon off events worker connections use select multi accept off By starting your config file like this nginx will helpfully avoid forking to background and start itself at a console where it belongs Your first server section should look like this server listen lt ip gt We do this because We want the parser to decide it s happy to run as non root Without specifying the IP something doesn t bind properly in our later process Operate with stdin stdout Following the suggested build gets you halfway there but the remaining problem is that nginx wants to take input from a network port not from stdin Fortunately this project exists Preeny on Github Preeny almost solves our issues I say almost because of two things Preeny intercepts accept but where it exists my system nginx uses accept nginx s default polling mechanism simply doesn t recognise connections that have been redirected and never triggers the event loop For the first of these I wrote this patch Given accept and accept are equivalent enough for our purposes this patch just pushes accept to the intercepted accept diff git a src desock c b src desock c
index bdb bef a src desock c b src desock c int acceptint sockfd struct sockaddr addr socklen t addrlen else return original acceptsockfd addr addrlen int acceptint sockfd struct sockaddr addr socklen t addrlen int flags acceptsockfd addr addrlen int bindint sockfd const struct sockaddr addr socklen t addrlen if preeny socket threads to frontsockfd Again compile as per the Preeny instructions I won t walk you through this Running it With this in place you can run nginx from the command line and have it take HTTP syntax from stdin LD PRELOAD quot home technion attack preeny Linux x desock so quot nginx Emulating bind on port GET HTTP HTTP OK
Server nginx Date Tue Apr GMT
Content Type text html
Content Length Last Modified Mon Apr GMT
Connection close
ETag quot dfc quot Accept Ranges bytes lt DOCTYPE html gt lt html gt lt head gt lt title gt Welcome to nginx lt title gt lt style gt body width em margin auto font family Tahoma Verdana Arial sans serif lt style gt lt head gt lt body gt lt h gt Welcome to nginx lt h gt lt p gt If you see this page the nginx web server is successfully installed and
working Further configuration is required lt p gt lt p gt For online documentation and support please refer to lt a href quot http nginx org quot gt nginx org lt a gt lt br gt Commercial support is available at lt a href quot http nginx com quot gt nginx com lt a gt lt p gt lt p gt lt em gt Thank you for using nginx lt em gt lt p gt lt body gt lt html gt This is successful almost The problem you now see is that nginx never actually exits To get around this we had to patch nginx itself Specifically at line I added this static int first fd if first fd first fd max fd ifmax fd gt first fd printf quot Exiting cleanly n quot exit I m sure there s a better place to patch but this seemed to be the easiest for me to find Specifically when it knows it s been through the event loop once before and actually accepted a connection already it ll log as such and exit Now let s get a proper test case up and running I created testcases in txt based on a standard HTTP connection GET HTTP Acceptx text html application xhtml xml Accept Language en AU
User Agent Mozilla Windows NT WOW Trident rv like Gecko
Accept Encoding gzip deflate
Host lolware net
DNT Connection Keep Alive
Cookie A regregergeg Now let s execute it and see how that looks LD PRELOAD quot patch preeny Linux x desock so quot nginx lt testcases in txt Emulating bind on port HTTP OK
Server nginx Date Tue Apr GMT
Content Type text html
Content Length Last Modified Mon Apr GMT
Connection keep alive
ETag quot dfc quot Accept Ranges bytes lt DOCTYPE html gt lt html gt lt head gt lt title gt Welcome to nginx lt title gt lt style gt body width em margin auto font family Tahoma Verdana Arial sans serif lt style gt lt head gt lt body gt lt h gt Welcome to nginx lt h gt lt p gt If you see this page the nginx web server is successfully installed and
working Further configuration is required lt p gt lt p gt For online documentation and support please refer to lt a href quot http nginx org quot gt nginx org lt a gt lt br gt Commercial support is available at lt a href quot http nginx com quot gt nginx com lt a gt lt p gt lt p gt lt em gt Thank you for using nginx lt em gt lt p gt lt body gt lt html gt Exiting cleanly That right there is perfect It takes the input file from stdin and passes it to nginx outputs the HTML web content then quits Now all that s neccessary is to run it under afl fuzz LD PRELOAD home technion attack preeny Linux x desock so home technion afl b afl fuzz i testcases o findings nginx Now hang on this ll run for a while Share Post Twitter Facebook Google Technion Lolware s blog larr Previous Next rarr copy Technion with Jekyll Theme dbyll by dbtek