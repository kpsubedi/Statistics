function var b window f chrome g tick k jstiming function function da this t this tick functiona d c var e void c c new Date getTime this ta e d ifvoid ctry b console timeStamp CSI a catchh thisg start null a var a b performance a b performance timing var n a new da responseStart new d b jstiming Timer d load n ifa var c a navigationStart h a responseStart c bk srt h c ifa var e bk load c eg wtsrt void c eg wtsrt wtsrt h eg tbsd wtsrt try a null bf bf csi a Math floorbf csi pageT e d bk loadg aft var l function m l l bk loadg firstScrollTime b addEventListener b addEventListener scroll m b attachEvent onscroll m The Netflix Tech Blog Introducing FIDO Automated Security Incident Response var a indexOf b m e ^ m f g m function h var c window location href d c splitf switchd length case return c g case return if window jstiming window jstiming load tick headEnd function setAttributeOnloadobject attribute val ifwindow addEventListener window addEventListener load function objectattribute val false else window attachEvent onload function objectattribute val gapi load gapi iframes gapi iframes style bubble function if gapi iframes gapi iframes getContext gapi iframes getContext openChild url https www blogger com navbar g targetBlogID blogName The Netflix Tech Blog publishMode PUBLISH MODE HOSTED navbarType LIGHT layoutType LAYOUTS searchRoot http techblog netflix com search blogLocale en v homepageUrl http techblog netflix com targetPostID blogPostOrPageUrl http techblog netflix com introducing fido automated security html blogFollowUrl https plus google com vt where document getElementById navbar iframe container id navbar iframe function var script document createElement script script type text javascript script src pagead googlesyndication com pagead js google top exp js var head document getElementsByTagName head if head head appendChildscript window fbAsyncInit function FB init appId status true check login status
cookie true enable cookies to allow the server to access the session
xfbml true parse XFBML function var e document createElement script e src document location protocol connect facebook net en US all js e async true document getElementById fb root appendChilde Monday May Introducing FIDO Automated Security Incident Response We re excited to announce the open source release of FIDO Fully Integrated Defense Operation apologies to the FIDO Alliance for acronym collision our system for automatically analyzing security events and responding to security incidents Overview
The typical process for investigating security related alerts is labor intensive and largely manual To make the situation more difficult as attacks increase in number and diversity there is an increasing array of detection systems deployed and generating even more alerts for security teams to investigate Netflix like all organizations has a finite amount of resources to combat this phenomenon so we built FIDO to help FIDO is an orchestration layer that automates the incident response process by evaluating assessing and responding to malware and other detected threats The idea for FIDO came from a simple proof of concept a number of years ago Our process for handling alerts from one of our network based malware systems was to have a help desk ticket created and assigned to a desktop engineer for follow up typically a scan of the impacted system or perhaps a re image of the hard drive The time from alert generation to resolution of these tickets spanned from days to over a week Our help desk system had an API so we had a hypothesis that we could cut down resolution time by automating the alert to ticket process The simple system we built to ingest the alerts and open the tickets cut the resolution time to a few hours and we knew we were onto something thus FIDO was born Architecture and Operation
This section describes FIDO s operation and the following diagram provides an overview of FIDO s architecture Detection
FIDO s operation begins with the receipt of an event via one of FIDO s detectors Detectors are off the shelf security products e g firewalls IDS anti malware systems or custom systems that detect malicious activities or threats Detectors generate alerts or messages that FIDO ingests for further processing FIDO provides a number of ways to ingest events including via API the preferred method SQL database log file and email FIDO supports a variety of detectors currently e g Cyphort ProtectWise CarbonBlack Bit with more planned or under development Analysis and Enrichment
The next phase of FIDO operation involves deeper analysis of the event and enrichment of the event data with both internal and external data sources Raw security events often have little associated context and this phase of operation is designed to supplement the raw event data with supporting information to enable more accurate and informed decision making The first component of this phase is analysis of the event s target typically a computer and or user but potentially any targeted resource Is the machine a Windows host or a Linux server Is it in the PCI zone Does the system have security software installed and the latest patches Is the targeted user a Domain Administrator An executive Having answers to these questions allows us to better evaluate the threat and determine what actions need to be taken and with what urgency To gather this data FIDO queries various internal data sources currently supported are Active Directory LANDesk and JAMF with other sources under consideration In addition to querying internal sources FIDO consults external threat feeds for information relevant to the event under analysis The use of threat feeds help FIDO determine whether a generated event may be a false positive or how serious and pervasive the issue may be Another way to think of this step is never trust always verify A generated alert is simply raw data it must be enriched evaluated and corroborated before actioning FIDO supports several threats feeds including ThreatGrid and VirusTotal with additional feeds under consideration Correlation and Scoring
Once internal and external data has been gathered about a given event and its targets FIDO seeks to correlate the information with other data it has seen and score the event to facilitate ultimate disposition The correlation component serves several functions first have multiple detectors identified this same issue If so it could potentially be a more serious threat Second has one of your detectors already blocked or remediated the issue for example a network based malware detector identifies an issue and a separate host based system repels the same item If the event has already been addressed by one of your controls FIDO may simply provide a notification that requires no further action The following image gives a sense of how the various scoring components work together Scoring is multi dimensional and highly customizable in FIDO Essentially what scoring allows you to do is tune FIDO s response to the threat and your own organization s unique requirements FIDO implements separate scoring for the threat the machine and the user and rolls the separate scores into a total score Scoring allows you to treat PCI systems different than lab systems customer service representatives different than engineers and new event sources different than event sources with which you have more experience and perhaps trust Scoring leads into the last phase of FIDO s operation Notification and Enforcement Notification and Enforcement
In this phase FIDO determines and executes a next action based on the ingested event collected data and calculated scores This action may simply be an email to the security team with details or storing the information for later retrieval and analysis Or FIDO may implement more complex and proactive measures such as disabling an account ending a VPN session or disabling a network port Importantly the vast majority of enforcement logic in FIDO has been Netflix specific For this reason we ve removed most of this logic and code from the current OSS version of FIDO We will re implement this functionality in the OSS version when we are better able to provide the end user reasonable and scalable control over enforcement customization and actions Open Items amp Future Plans
Netflix has been using FIDO for a bit over years and while it is meeting our requirements well we have a number of features and improvements planned On the user interface side we are planning for an administrative UI with dashboards and assistance for enforcement configuration Additional external integrations planned include PAN OpenDNS and SentinelOne We re also working on improvements around correlation and host detection And because it s now OSS you are welcome to suggest and submit your own improvements Rob Fry Brooks Evans Jason Chan Posted by Jason Chan at AM Email ThisBlogThis Share to TwitterShare to FacebookShare to Pinterest Older Post Home window gcfg lang en Links Netflix US Canada Blog
Netflix America Latina Blog
Netflix Brasil Blog
Netflix Benelux Blog
Netflix DACH Blog
Netflix France Blog
Netflix Nordics Blog
Netflix UK Ireland Blog
Netflix ISP Speed Index
Open positions at Netflix
Netflix Website
Facebook Netflix Page
Netflix UI Engineering RSS Feed About the Netflix Tech Blog This is a Netflix blog focused on technology and technology issues We ll share our perspectives decisions and challenges regarding the software we build and use to create the Netflix service Blog Archive May Introducing FIDO Automated Security Incident Resp April March February January December November October September August July June May April March February January December November October September August July June May April March February January December November October September July June May April March February January December November October September August July June May April March February January December Labels accelerated compositing adwords Aegisthus algorithms aminator analytics Android angular api appender Archaius architectural design Asgard Astyanax authentication automation autoscaling availability AWS benchmark big data billing Blitzj build Cable caching Cassandra chaos engineering chaos monkey ci classloaders Clojure cloud cloud architecture cloud prize collection concurrency configuration configuration management conformity monkey content platform engineering continuous delivery coordination cost management crypto Cryptography CSS CUDA dart data migration data pipeline data science data visualization database DataStax deadlock deep learning Denominator dependency injection device device proliferation devops distributed DNS Docker Dockerhub DSL Dyn DynECT Elastic Load Balancer elasticsearch ELB EMR encoding eucalyptus eureka evcache failover fault tolerance Flow FRP functional reactive garbage garbage collection gc Genie Governator GPU Groovy Hack Day Hadoop HBase high volume high volume distributed systems Hive HTML https Hystrix IBM ice initialization innovation insights inter process communication Ipv isolation ISP java JavaScript jclouds jenkins Karyon lifecycle lipstick load balancing locking locks logj logging machine learning Map Reduce meetup memcache memcached message security layer Mobile modules monitoring msl negative keywords Netflix Netflix API netflix graph Netflix OSS NetflixOSS neural networks node js NoSQL observability Open source operational excellence operational insight operational visibility optimization OSS outage page generation payments Paypal performance personalization phone Pig Playback prediction predictive modeling Presto prize pytheas python Quality rca React Reactive Programming real time insights Recipe recommendations Redis reinvent reliability remote procedure calls research resiliency REST Ribbon Riot Games root cause analysis Route rule engine Rx scalability scale scripting library search security Servo shared libraries simian army SimpleDB site reliability sqoop ssd ssl STAASH stream processing streaming suro SWF synchronization tablet testability tls traffic optimization TV UI UltraDNS unit test uptime user interface visualization WebKit Wii U winner winners workflow ZeroToDocker ZooKeeper zuul cloud architecture Awesome Inc template Powered by Blogger window setTimeoutfunction document body className document body className replace loading if window jstiming window jstiming load tick widgetJsBefore if typeofBLOG attachCsiOnload undefined BLOG attachCsiOnload null window blogger templates experiment id templatesV window blogger blog id BLOG attachCsiOnload item WidgetManager Init www blogger com rearrange blogID xd techblog netflix com introducing fido automated security html WidgetManager SetDataContext name blog data blogId bloggerUrl http www blogger com title The Netflix Tech Blog pageType item postId url http techblog netflix com introducing fido automated security html canonicalUrl http techblog netflix com introducing fido automated security html canonicalHomepageUrl http techblog netflix com homepageUrl http techblog netflix com blogspotFaviconUrl http techblog netflix com favicon ico enabledCommentProfileImages true adultContent false disableAdSenseWidget false analyticsAccountNumber searchLabel searchQuery pageName Introducing FIDO Automated Security Incident Response pageTitle The Netflix Tech Blog Introducing FIDO Automated Security Incident Response encoding UTF locale en localeUnderscoreDelimited en isPrivate false isMobile false isMobileRequest false mobileClass isPrivateBlog false languageDirection ltr feedLinks link rel alternate type application atom xml title The Netflix Tech Blog Atom href http techblog netflix com feeds posts default n link rel alternate type application rss xml title The Netflix Tech Blog RSS href http techblog netflix com feeds posts default alt rss n link rel service post type application atom xml title The Netflix Tech Blog Atom href http www blogger com feeds posts default n n link rel alternate type application atom xml title The Netflix Tech Blog Atom href http techblog netflix com feeds comments default n meTag openIdOpTag postImageThumbnailUrl http bp blogspot com T MoNrSBM VUezfveTXdI AAAAAAAABJM HHbnwJqDO s c Netflix B png postImageUrl http bp blogspot com T MoNrSBM VUezfveTXdI AAAAAAAABJM HHbnwJqDO s Netflix B png latencyHeadScript script type text javascript function var b window f chrome g tick k jstiming function function da this t this tick functiona d c var e void c c new Date getTime this ta e d ifvoid ctry b console timeStamp CSI a catchh thisg start null a var a b performance a b performance timing var n a new da responseStart new d b jstiming Timer d load n ifa var c a navigationStart h a responseStart c h c bk srt h c ifa var e bk load c h c eg wtsrt void c eg wtsrt wtsrt h eg tbsd wtsrt try a null nbf bf csi a Math floorbf csi pageT e c eg tbnd void bf csi startE eg tbnd tbnd c null a b gtbExternal a b gtbExternal pageT null a b external a b external pageT e c eg tbnd void b external startE eg tbnd tbnd c a bk pt a catchp b tickAboveFold functiond var a ifd offsetParent do a d offsetTop whiled d offsetParent d a d bk loadg aft var l function m l l bk loadg firstScrollTime b addEventListener b addEventListener scroll m b attachEvent onscroll m n script mobileHeadScript ieCssRetrofitLinks if IE script type text javascript src https www blogger com static v jsbin ieretrofit js script n endif view dynamicViewsCommentsSrc www blogblog com dynamicviews ccec js comments js dynamicViewsScriptSrc www blogblog com dynamicviews cdaddefa plusOneApiSrc https apis google com js plusone js sf n tf name skin data vars date border size description font normal normal px Arial Tahoma Helvetica FreeSans sans serif body background gradient cap none tabs selected background color footer background gradient none date background transparent none no repeat scroll top left widget border radius post title text color cf widget font normal normal px Arial Tahoma Helvetica FreeSans sans serif widget link hover color cd link visited color dc mobile background size auto date space px post title font normal bold px Arial Tahoma Helvetica FreeSans sans serif tabs text color title separator border size px header background gradient none widget outer background gradient none widget link color cd mobile button color ffffff widget title font normal bold px Arial Tahoma Helvetica FreeSans sans serif widget outer background color transparent date last border radius bottom widget outer margin top shadow spread px title shadow spread px outer shadow spread keycolor eeeeee image shadow spread image background color transparent header font normal bold px Arial Tahoma Helvetica FreeSans sans serif header background color transparent date header border radius top widget border bevel color transparent tabs border color widget background color ffffff date position static post first padding top tabs background gradient urlhttp www blogblog com kt awesomeinc tabs gradient light png mobile background overlay transparent none repeat scroll top left date border color eeeeee tabs background color eeeeee widget link visited color dc feed text color header margin top link hover color cd date last space bottom px header margin bottom date padding bottom list separator border size px description text color body text color header padding top px post border color eeeeee footer text color post background color ffffff pager space top em endSide right startSide left body background size auto tabs font normal bold px Arial Tahoma Helvetica FreeSans sans serif body font normal normal px Arial Tahoma Helvetica FreeSans sans serif date first border radius top date header position px date text color widget title text color image border color transparent separator outdent px widget text color link color cd widget border color eeeeee pager border radius top feed link color cd header text color footer background color ffffff widget padding top px feed link visited color dc feed link hover color cd date font normal normal px Arial Tahoma Helvetica FreeSans sans serif tabs selected text color ffffff date side right post border bevel color eeeeee widget padding side px body background color eeeeee image border radius pager background color ffffff widget alternate text color override name view data classic name classic url view classic flipcard name flipcard url view flipcard magazine name magazine url view magazine mosaic name mosaic url view mosaic sidebar name sidebar url view sidebar snapshot name snapshot url view snapshot timeslide name timeslide url view timeslide WidgetManager RegisterWidget NavbarView new WidgetInfo Navbar navbar null document getElementById Navbar displayModeFull WidgetManager RegisterWidget HeaderView new WidgetInfo Header header null document getElementById Header displayModeFull WidgetManager RegisterWidget BlogView new WidgetInfo Blog main null document getElementById Blog cmtInteractionsEnabled false lightboxEnabled true lightboxModuleUrl https www blogger com static v jsbin lbx js lightboxCssUrl https www blogger com static v v css lightbox bundle css displayModeFull WidgetManager RegisterWidget LinkListView new WidgetInfo LinkList sidebar right null document getElementById LinkList displayModeFull WidgetManager RegisterWidget TextView new WidgetInfo Text sidebar right null document getElementById Text displayModeFull WidgetManager RegisterWidget BlogArchiveView new WidgetInfo BlogArchive sidebar right null document getElementById BlogArchive languageDirection ltr displayModeFull WidgetManager RegisterWidget LabelView new WidgetInfo Label sidebar right null document getElementById Label displayModeFull WidgetManager RegisterWidget AttributionView new WidgetInfo Attribution footer null document getElementById Attribution attribution Awesome Inc template Powered by a href https www blogger com target blank Blogger a displayModeFull